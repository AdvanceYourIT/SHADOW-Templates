{
  "name": "CF-UltraTreesizeNinja",
  "description": "https://github.com/freezscholte/Public-Ninja-Scripts/blob/main/CF-Treesize/CF-UltraTreesizeNinja.ps1",
  "categoriesIds": [
    8
  ],
  "architecture": [
    "64",
    "32"
  ],
  "language": "powershell",
  "operatingSystems": [
    "Windows"
  ],
  "code": "",
  "scriptParameters": [],
  "defaultRunAs": "system",
  "useFirstParametersOptionAsDefault": false
}
