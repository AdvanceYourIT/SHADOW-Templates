{
  "name": "Deploy Check",
  "description": "",
  "categoriesIds": [
    8
  ],
  "architecture": [
    "64",
    "32"
  ],
  "language": "powershell",
  "operatingSystems": [
    "Windows"
  ],
  "code": "# Define extension details\n# Chrome\n$chromeExtensionId = \"benimdeioplgkhanklclahllklceahbe\"\n$chromeUpdateUrl = \"https://clients2.google.com/service/update2/crx\"\n$chromeManagedStorageKey = \"HKLM:\\SOFTWARE\\Policies\\Google\\Chrome\\3rdparty\\extensions\\$chromeExtensionId\\policy\"\n$chromeExtensionSettingsKey = \"HKLM:\\SOFTWARE\\Policies\\Google\\Chrome\\ExtensionSettings\\$chromeExtensionId\"\n\n#Edge\n$edgeExtensionId = \"knepjpocdagponkonnbggpcnhnaikajg\"\n$edgeUpdateUrl = \"https://edge.microsoft.com/extensionwebstorebase/v1/crx\"\n$edgeManagedStorageKey = \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge\\3rdparty\\extensions\\$edgeExtensionId\\policy\"\n$edgeExtensionSettingsKey = \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge\\ExtensionSettings\\$edgeExtensionId\"\n\n# Extension Configuration Settings\n$showNotifications = 1 # 0 = Unchecked, 1 = Checked (Enabled); default is 1; This will set the \"Show Notifications\" option in the extension settings.\n$enableValidPageBadge = 0 # 0 = Unchecked, 1 = Checked (Enabled); default is 0; This will set the \"Show Valid Page Badge\" option in the extension settings.\n$enablePageBlocking = 1 # 0 = Unchecked, 1 = Checked (Enabled); default is 1; This will set the \"Enable Page Blocking\" option in the extension settings.\n$forceToolbarPin = 1 # 0 = Not pinned, 1 = Force pinned to toolbar; default is 1\n$enableCippReporting = 0 # 0 = Unchecked, 1 = Checked (Enabled); default is 1; This will set the \"Enable CIPP Reporting\" option in the extension settings.\n$cippServerUrl = \"\" # This will set the \"CIPP Server URL\" option in the extension settings; default is blank; if you set $enableCippReporting to 1, you must set this to a valid URL including the protocol (e.g., https://cipp.cyberdrain.com). Can be vanity URL or the default azurestaticapps.net domain.\n$cippTenantId = \"\" # This will set the \"Tenant ID/Domain\" option in the extension settings; default is blank; if you set $enableCippReporting to 1, you must set this to a valid Tenant ID.\n$customRulesUrl = \"\" # This will set the \"Config URL\" option in the Detection Configuration settings; default is blank.\n$updateInterval = 24 # This will set the \"Update Interval\" option in the Detection Configuration settings; default is 24 (hours). Range: 1-168 hours (1 hour to 1 week).\n$urlAllowlist = @() # This will set the \"URL Allowlist\" option in the Detection Configuration settings; default is blank; if you want to add multiple URLs, add them as a comma-separated list within the brackets (e.g., @(\"https://example1.com\", \"https://example2.com\")). Supports simple URLs with * wildcard (e.g., https://*.example.com) or advanced regex patterns (e.g., ^https:\\/\\/(www\\.)?example\\.com\\/.*$).\n$enableDebugLogging = 0 # 0 = Unchecked, 1 = Checked (Enabled); default is 0; This will set the \"Enable Debug Logging\" option in the Activity Log settings.\n\n# Custom Branding Settings\n$companyName = \"CyberDrain\" # This will set the \"Company Name\" option in the Custom Branding settings; default is \"CyberDrain\".\n$companyURL = \"https://cyberdrain.com\" # This will set the Company URL option in the Custom Branding settings; default is \"https://cyberdrain.com\"; Must include the protocol (e.g., https://).\n$productName = \"Check - Phishing Protection\" # This will set the \"Product Name\" option in the Custom Branding settings; default is \"Check - Phishing Protection\".\n$supportEmail = \"\" # This will set the \"Support Email\" option in the Custom Branding settings; default is blank.\n$primaryColor = \"#F77F00\" # This will set the \"Primary Color\" option in the Custom Branding settings; default is \"#F77F00\"; must be a valid hex color code (e.g., #FFFFFF).\n$logoUrl = \"\" # This will set the \"Logo URL\" option in the Custom Branding settings; default is blank. Must be a valid URL including the protocol (e.g., https://example.com/logo.png); protocol must be https; recommended size is 48x48 pixels with a maximum of 128x128.\n\n# Extension Settings\n# These settings control how the extension is installed and what permissions it has. It is recommended to leave these at their default values unless you have a specific need to change them.\n$installationMode = \"force_installed\"\n\n# Function to check and install extension\nfunction Configure-ExtensionSettings {\n    param (\n        [string]$ExtensionId,\n        [string]$UpdateUrl,\n        [string]$ManagedStorageKey,\n        [string]$ExtensionSettingsKey\n    )\n\n    # Create and configure managed storage key\n    if (!(Test-Path $ManagedStorageKey)) {\n        New-Item -Path $ManagedStorageKey -Force | Out-Null\n    }\n\n    # Set extension configuration settings\n    New-ItemProperty -Path $ManagedStorageKey -Name \"showNotifications\" -PropertyType DWord -Value $showNotifications -Force | Out-Null\n    New-ItemProperty -Path $ManagedStorageKey -Name \"enableValidPageBadge\" -PropertyType DWord -Value $enableValidPageBadge -Force | Out-Null\n    New-ItemProperty -Path $ManagedStorageKey -Name \"enablePageBlocking\" -PropertyType DWord -Value $enablePageBlocking -Force | Out-Null\n    New-ItemProperty -Path $ManagedStorageKey -Name \"enableCippReporting\" -PropertyType DWord -Value $enableCippReporting -Force | Out-Null\n    New-ItemProperty -Path $ManagedStorageKey -Name \"cippServerUrl\" -PropertyType String -Value $cippServerUrl -Force | Out-Null\n    New-ItemProperty -Path $ManagedStorageKey -Name \"cippTenantId\" -PropertyType String -Value $cippTenantId -Force | Out-Null\n    New-ItemProperty -Path $ManagedStorageKey -Name \"customRulesUrl\" -PropertyType String -Value $customRulesUrl -Force | Out-Null\n    New-ItemProperty -Path $ManagedStorageKey -Name \"updateInterval\" -PropertyType DWord -Value $updateInterval -Force | Out-Null\n    New-ItemProperty -Path $ManagedStorageKey -Name \"urlAllowlist\" -PropertyType MultiString -Value $urlAllowlist -Force | Out-Null\n    New-ItemProperty -Path $ManagedStorageKey -Name \"enableDebugLogging\" -PropertyType DWord -Value $enableDebugLogging -Force | Out-Null\n\n    # Create and configure custom branding\n    $customBrandingKey = \"$ManagedStorageKey\\customBranding\"\n    if (!(Test-Path $customBrandingKey)) {\n        New-Item -Path $customBrandingKey -Force | Out-Null\n    }\n\n    # Set custom branding settings\n    New-ItemProperty -Path $customBrandingKey -Name \"companyName\" -PropertyType String -Value $companyName -Force | Out-Null\n    New-ItemProperty -Path $customBrandingKey -Name \"companyURL\" -PropertyType String -Value $companyURL -Force | Out-Null\n    New-ItemProperty -Path $customBrandingKey -Name \"productName\" -PropertyType String -Value $productName -Force | Out-Null\n    New-ItemProperty -Path $customBrandingKey -Name \"supportEmail\" -PropertyType String -Value $supportEmail -Force | Out-Null\n    New-ItemProperty -Path $customBrandingKey -Name \"primaryColor\" -PropertyType String -Value $primaryColor -Force | Out-Null\n    New-ItemProperty -Path $customBrandingKey -Name \"logoUrl\" -PropertyType String -Value $logoUrl -Force | Out-Null\n\n    # Create and configure extension settings\n    if (!(Test-Path $ExtensionSettingsKey)) {\n        New-Item -Path $ExtensionSettingsKey -Force | Out-Null\n    }\n\n    # Set extension settings\n    New-ItemProperty -Path $ExtensionSettingsKey -Name \"installation_mode\" -PropertyType String -Value $installationMode -Force | Out-Null\n    New-ItemProperty -Path $ExtensionSettingsKey -Name \"update_url\" -PropertyType String -Value $UpdateUrl -Force | Out-Null\n\n    # Add toolbar pinning if enabled\n    if ($forceToolbarPin -eq 1) {\n        if ($ExtensionId -eq $edgeExtensionId) {\n            New-ItemProperty -Path $ExtensionSettingsKey -Name \"toolbar_state\" -PropertyType String -Value \"force_shown\" -Force | Out-Null\n        } elseif ($ExtensionId -eq $chromeExtensionId) {\n            New-ItemProperty -Path $ExtensionSettingsKey -Name \"toolbar_pin\" -PropertyType String -Value \"force_pinned\" -Force | Out-Null\n        }\n    }\n \n    Write-Output \"Configured extension settings for $ExtensionId\"\n}\n\n# Configure settings for Chrome and Edge\nConfigure-ExtensionSettings -ExtensionId $chromeExtensionId -UpdateUrl $chromeUpdateUrl -ManagedStorageKey $chromeManagedStorageKey -ExtensionSettingsKey $chromeExtensionSettingsKey\nConfigure-ExtensionSettings -ExtensionId $edgeExtensionId -UpdateUrl $edgeUpdateUrl -ManagedStorageKey $edgeManagedStorageKey -ExtensionSettingsKey $edgeExtensionSettingsKey",
  "scriptParameters": [],
  "defaultRunAs": "system",
  "useFirstParametersOptionAsDefault": false
}
